version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: kong:3.4
    container_name: iris-api-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API
    depends_on:
      - postgres
    networks:
      - iris-network

  # Database
  postgres:
    image: postgres:15
    container_name: iris-postgres
    environment:
      POSTGRES_DB: iris_platform
      POSTGRES_USER: iris_user
      POSTGRES_PASSWORD: iris_password
      POSTGRES_MULTIPLE_DATABASES: kong
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - "5432:5432"
    networks:
      - iris-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: iris-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - iris-network

  # Object Storage (MinIO)
  minio:
    image: minio/minio:latest
    container_name: iris-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: iris_admin
      MINIO_ROOT_PASSWORD: iris_password
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - iris-network

  # Search Engine
  opensearch:
    image: opensearchproject/opensearch:2.10.0
    container_name: iris-search
    environment:
      - discovery.type=single-node
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_SECURITY_PLUGIN=true"
    ports:
      - "9200:9200"
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - iris-network

  # User Service
  user-service:
    build: ./services/user-service
    container_name: iris-user-service
    environment:
      DATABASE_URL: postgresql://iris_user:iris_password@postgres:5432/iris_platform
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-jwt-secret-here
    ports:
      - "3001:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - iris-network

  # Research Engine Service
  research-engine:
    build: ./services/research-engine
    container_name: iris-research-engine
    environment:
      DATABASE_URL: postgresql://iris_user:iris_password@postgres:5432/iris_platform
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: iris_admin
      MINIO_SECRET_KEY: iris_password
      # AI API Keys (set in .env file)
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      XAI_API_KEY: ${XAI_API_KEY}
    ports:
      - "3002:3000"
    depends_on:
      - postgres
      - redis
      - minio
    volumes:
      - ./iris_orchestrator.py:/app/iris_orchestrator.py:ro
      - ./config:/app/config:ro
    networks:
      - iris-network

  # Data Platform Service
  data-platform:
    build: ./services/data-platform
    container_name: iris-data-platform
    environment:
      DATABASE_URL: postgresql://iris_user:iris_password@postgres:5432/iris_platform
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: iris_admin
      MINIO_SECRET_KEY: iris_password
      OPENSEARCH_URL: http://opensearch:9200
    ports:
      - "3003:3000"
    depends_on:
      - postgres
      - minio
      - opensearch
    networks:
      - iris-network

  # Integration Hub Service
  integration-hub:
    build: ./services/integration-hub
    container_name: iris-integration-hub
    environment:
      DATABASE_URL: postgresql://iris_user:iris_password@postgres:5432/iris_platform
      REDIS_URL: redis://redis:6379
    ports:
      - "3004:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - iris-network

  # Web UI
  web-ui:
    build: ./frontend/web-ui
    container_name: iris-web-ui
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - iris-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: iris-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - iris-network

  grafana:
    image: grafana/grafana:latest
    container_name: iris-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3050:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - iris-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  opensearch_data:
  prometheus_data:
  grafana_data:

networks:
  iris-network:
    driver: bridge